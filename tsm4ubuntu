#!/bin/bash
#
# all the documentation is on the github:
# https://github.com/briner/tsm4ubuntu-12.04
# in the README

if [[ $(uname -p) != 'x86_64' ]] ; then
    echo "this script only works for amd64 distribution"
    exit 1
fi


define_variable()
{   
    # TSM_ROOT defines the path where the rpms are. tsm4ubuntu will work
    # in this directory
    TSM_ROOT=~/tsm/6.3.1.0

    # the name of the package will be
    # <short_org>-<TSM_NAME>-{ba,api..}_<TSM_VER>-<DDEB_VER>
    TSM_NAME=TSM ; # usually it is "TSM"
    TSM_VER=6.3.1
    SHORT_ORG=UiS ; # a short name of your organisation

    # where the tsm files will be installed without the first and the last "/"
    OPT_PATH='opt/tivoli/tsm' ; # usually it is "opt/tivoli/tsm"

    # email of the packager of these
    EMAIL_MAINTAINER='Martin Goldhahn <martin.goldhahn@uis.no>'
    
    # should the init script use dsmc or dsmcad
    MODE=dsmcad
    
    #
    # this variable define the name of the rpm for each element 
    unset drpm
    declare -Ag drpm
    drpm["crypt"]="gskcrypt64-8.0.14.14.linux.x86_64.rpm"
    drpm["ssl"]="gskssl64-8.0.14.14.linux.x86_64.rpm"
    drpm["api"]="TIVsm-API64.x86_64.rpm"
    drpm["ba"]="TIVsm-BA.x86_64.rpm"

    #
    # this variable define of the version of packaging for each element
    # you should be "0" for your first time.
    unset ddeb_ver
    declare -Ag ddeb_ver
    ddeb_ver["crypt"]="1"
    ddeb_ver["ssl"]="1"
    ddeb_ver["ba"]="1"
    ddeb_ver["api"]="1"
    ddeb_ver["integration"]="1" ; # this is only used at the University of Geneva
}

rpm2dir()
{
    define_variable
    for rpm in ${drpm[*]} ; do
        cd ${TSM_ROOT}
        d=cpio_${rpm%.rpm}
        [ -d $d ] && rm -fr $d
        echo "extracting $rpm in $d" 
        mkdir $d
        cd $d
        rpm2cpio ../${rpm} | cpio -idm
    done
}


###########################################################
# gskcrypt64
#
wrap_crypt()
{
    OBJ=crypt

    # constructed variable
    define_variable
    DEB_VER=${ddeb_ver[${OBJ}]}
    DEBNAME=${SHORT_ORG,,}-${TSM_NAME,,}-${OBJ}
    DEB_BUILD=${TSM_ROOT}/${DEBNAME}_${TSM_VER}-${DEB_VER}

    cd ${TSM_ROOT}

    [ -d ${DEB_BUILD} ] && rm -fr ${DEB_BUILD}
    mkdir -p ${DEB_BUILD}/{DEBIAN,${OPT_PATH}/gsk8_64}
    rsync -aHl cpio_${drpm[${OBJ}]%.rpm}/usr/local/ibm/gsk8_64/ ${DEB_BUILD}/${OPT_PATH}/gsk8_64/
    #
    #
    # DEBIAN control
    cat > ${DEB_BUILD}/DEBIAN/control << EOF
Package: ${DEBNAME}
Version: ${TSM_VER}-${DEB_VER}
Architecture: amd64
Maintainer: ${EMAIL_MAINTAINER}
Section: main
Priority: extra
Description: gskcrypt64 for ${TSM_NAME} @ ${SHORT_ORG}
    Crypto Library for ${TSM_NAME}
    TSM stands for Tivoli Storage Manager and it is a solution for backuping is
    machine at ${SHORT_ORG}.
EOF
    #
    #
    # construct the package
    fakeroot dpkg -b ${DEB_BUILD}
}



###########################################################
# gskssl64
#
wrap_ssl()
{
    OBJ=ssl

    # constructed variable
    define_variable
    DEB_VER=${ddeb_ver[${OBJ}]}
    DEBNAME=${SHORT_ORG,,}-${TSM_NAME,,}-${OBJ}
    DEB_BUILD=${TSM_ROOT}/${DEBNAME}_${TSM_VER}-${DEB_VER}

    cd ${TSM_ROOT}

    [ -d ${DEB_BUILD} ] && rm -fr ${DEB_BUILD}
    mkdir -p ${DEB_BUILD}/{DEBIAN,${OPT_PATH}/gsk8_64}
    rsync -aHl cpio_${drpm[${OBJ}]%.rpm}/usr/local/ibm/gsk8_64/ ${DEB_BUILD}/${OPT_PATH}/gsk8_64/
    #
    #
    # DEBIAN control
    cat > ${DEB_BUILD}/DEBIAN/control << EOF
Package: ${DEBNAME}
Version: ${TSM_VER}-${DEB_VER}
Architecture: amd64
Maintainer: ${EMAIL_MAINTAINER}
Section: main
Priority: extra
Description: gskssl64 for ${TSM_NAME} @ ${SHORT_ORG}
 SSL Library for ${TSM_NAME}
 TSM stands for Tivoli Storage Manager and it is a solution for backuping is
 machine at ${SHORT_ORG}.
EOF
    #
    #
    # construct the package
    fakeroot dpkg -b ${DEB_BUILD}
}



###########################################################
# API
#
wrap_api()
{
    OBJ=api

    # constructed variable
    define_variable
    DEB_VER=${ddeb_ver[${OBJ}]}
    DEBNAME=${SHORT_ORG,,}-${TSM_NAME,,}-${OBJ}
    DEB_BUILD=${TSM_ROOT}/${DEBNAME}_${TSM_VER}-${DEB_VER}

    cd ${TSM_ROOT}

    [ -d ${DEB_BUILD} ] && rm -fr ${DEB_BUILD}
    mkdir -p ${DEB_BUILD}/{DEBIAN,${OPT_PATH}/client}
    rsync -aHl cpio_${drpm[${OBJ}]%.rpm}/opt/tivoli/tsm/client/ ${DEB_BUILD}/${OPT_PATH}/client/
    #
    rsync -aHl --force --delete cpio_${drpm[${OBJ}]%.rpm}/usr/lib64/ ${DEB_BUILD}/${OPT_PATH}/lib/
    cd ${DEB_BUILD}/${OPT_PATH}/lib/
    # relink to the good position the library
    for map in $(ls -l * | \
                 sed "s|[[:blank:]]\{2\}| |g" | \
                 cut -d ' ' -f9- | \
                 sed "s| -> |<==>| ;  s|/../opt/tivoli/tsm/|/|" ) ; do
       target=$(echo $map | sed 's|.*<==>||')
       link_name=$(echo $map | sed 's|<==>.*||')
       ln -sf ${target} ${link_name}
    done
    cd - > /dev/null
    #
    #
    cat > ${DEB_BUILD}/DEBIAN/control << EOF
Package: ${DEBNAME}
Version: ${TSM_VER}-${DEB_VER}
Architecture: amd64
Maintainer: ${EMAIL_MAINTAINER}
Section: main
Priority: extra
Description: api for ${TSM_NAME} @ ${SHORT_ORG}
 API Library for ${TSM_NAME}
 TSM stands for Tivoli Storage Manager and it is a solution for backuping is
 machine at ${SHORT_ORG}.
EOF
    #
    #
    # construct the package
    fakeroot dpkg -b ${DEB_BUILD}
}



###########################################################
# BA
#
wrap_ba()
{
    OBJ=ba

    # constructed variable
    define_variable
    DEB_VER=${ddeb_ver[${OBJ}]}
    DEBNAME=${SHORT_ORG,,}-${TSM_NAME,,}-${OBJ}
    DEB_BUILD=${TSM_ROOT}/${DEBNAME}_${TSM_VER}-${DEB_VER}

    cd ${TSM_ROOT}

    [ -d ${DEB_BUILD} ] && rm -fr ${DEB_BUILD}
    mkdir -p ${DEB_BUILD}/{DEBIAN,usr/bin,var/log/tsm,etc/init.d,${OPT_PATH}/bin}
    mkdir -p ${DEB_BUILD}/{usr/share/pixmaps,usr/share/applications}
    rsync -aHl cpio_${drpm[${OBJ}]%.rpm}/opt/tivoli/tsm/ ${DEB_BUILD}/${OPT_PATH}/
    #
    #
    # to remove the error:
    # ANS0102W Unable to open the message repository
    #   /opt/uau/tsm/client/ba/bin//EN_US/dsmclientV3.cat.
    #   The American English repository will be used instead.
    cd ${DEB_BUILD}/${OPT_PATH}/client/ba/bin
    ln -s ../../lang/EN_US
    cd ${TSM_ROOT}
    #
    #
    # LINK /etc/tsm ON ../tsm/client/ba/bin
    cd ${DEB_BUILD}/${OPT_PATH}/client/ba/bin
    ln -s /etc/tsm/dsm.opt .
    ln -s /etc/tsm/dsm.sys .
    cd ${TSM_ROOT}
    #
    #
    # WRAPPER to easy the install of bin on /usr/bin and to
    # let the agent to use this environment when passinf from user to root
    cat > ${DEB_BUILD}/${OPT_PATH}/bin/tsm-wrapper << EOF
#!/bin/bash
# dsmj can use openjdk wahou # to force the use of Sun's Java
# dsmj can use openjdk wahou # export PATH=/usr/lib/jvm/java-6-sun/bin/:$PATH
export DSM_DIR=/${OPT_PATH}/client/ba/bin/
export LANG=en_US.UTF-8
export LC_TYPE=en_US.UTF-8
export LD_LIBRARY_PATH="/${OPT_PATH}/client/api/bin64:\
/${OPT_PATH}/gsk8/lib/:\
/${OPT_PATH}/lib/"

appname=\$(basename \$0)
exec \${DSM_DIR}/\${appname} \$@
EOF
chmod a+x ${DEB_BUILD}/${OPT_PATH}/bin/tsm-wrapper
    #
    #
    # LDCONFIG
    mkdir -p ${DEB_BUILD}/etc/ld.so.conf.d
    cat > ${DEB_BUILD}/etc/ld.so.conf.d/${SHORT_ORG,,}-${TSM_NAME,,}.conf << EOF
/${OPT_PATH}/client/api/bin64
/${OPT_PATH}/gsk8_64/lib64
/${OPT_PATH}/lib
EOF
    #
    #
    # LINK THE EXECUTABLE TO THE WRAPPER
    cd ${DEB_BUILD}/usr/bin
    for f in dsmadmc  dsmagent  dsmc  dsmcad  dsmj  dsmswitch  dsmtca  dsmtrace ; do
        ln -sf /${OPT_PATH}/bin/tsm-wrapper ${f}; done
    cd ${TSM_ROOT}
    #
    #
    if [[ "$MODE" == "dsmcad" ]] ; then
    	    TSM_BIN=/usr/bin/dsmcad
    	    DAEMON_START_COMMAND='start-stop-daemon --start --quiet --pidfile ${PIDFILE} --exec ${DAEMON} || log_end_msg 1'
    else
    	    TSM_BIN=/usr/bin/dsmc
    	    DAEMON_START_COMMAND='start-stop-daemon -Sqb --startas /usr/bin/dsmc --pidfile ${PIDFILE} --make-pidfile --chdir ${DSM_LOG} -- schedule || log_end_msg 1'
    fi
    # INIT SCRIPT
    cat > ${DEB_BUILD}/etc/init.d/tsm << EOF
#!/bin/bash
### BEGIN INIT INFO
# Provides:          tsm
# Required-Start:    \$local_fs \$remote_fs \$network \$syslog
# Required-Stop:     \$local_fs \$remote_fs \$network \$syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start daemon at boot time
# Description:       Enable service provided by tsm.
### END INIT INFO

DAEMON=${TSM_BIN}
DSM_LOG=/var/log/tsm
PIDFILE=/var/run/tsm.pid

. /lib/lsb/init-functions

start_tsm()
{
    log_begin_msg "Starting TSM scheduler ..."
    mkdir -p \${DSM_LOG}
    $DAEMON_START_COMMAND
    log_end_msg 0
}
stop_tsm()
{
    log_begin_msg "Stopping TSM scheduler ..."
    start-stop-daemon -Kqop \${PIDFILE} || log_end_msg 1
    log_end_msg 0
}

case "\$1" in
  start)
    start_tsm
    ;;
  stop)
    stop_tsm
    ;;
  restart)
    stop_tsm
    start_tsm
    ;;
  *)
    log_success_msg "Usage: /etc/init.d/tsm {start|stop}"
    exit 1
esac

exit 0
EOF
    #
    chmod a+x  ${DEB_BUILD}/etc/init.d/tsm
    #
    #
    # DEBIAN control
    PREFIX=${SHORT_ORG,,}-${TSM_NAME,,}
    DEPENDS="${PREFIX}-ba, ${PREFIX}-crypt, ${PREFIX}-ssl, ${PREFIX}-api"
    cat > ${DEB_BUILD}/DEBIAN/control << EOF
Package: ${DEBNAME}
Version: ${TSM_VER}-${DEB_VER}
Architecture: amd64
Depends: ${DEPENDS}
Maintainer: ${EMAIL_MAINTAINER}
Section: main
Priority: extra
Description: ba for ${TSM_NAME} @ ${SHORT_ORG}
 Backup Agent for ${TSM_NAME}
 TSM stands for Tivoli Storage Manager and it is a solution for backuping is
 machine at ${SHORT_ORG}.
EOF
    #
    #
    # DEBIAN postinst
    cat > ${DEB_BUILD}/DEBIAN/postinst << 'EOF'
#!/bin/sh
set -e

if [ "$1" = "configure" ]; then
	ldconfig
    #
    # check if there is a valid configuration
    if LC_ALL=C dsmc query session > /dev/null 2>&1 ; then
        if LC_ALL=C dsmc query schedule 2>&1 | grep "There are no schedules associated with this node" > /dev/null ; then
            echo " - tsm configuration is good and planning is disabled"
            echo " - if you need a planning, configure it and then"
            echo "   - update-rc.d tsm defaults"
            echo "   - invoke-rc.d tsm start"
            invoke-rc.d tsm stop > /dev/null
            update-rc.d -f tsm remove >/dev/null
        else
            echo " - tsm configuration is good and planning is enabled"
            echo " - enabling the tsm daemon"
    	    update-rc.d tsm defaults >/dev/null
            invoke-rc.d tsm start || exit $?
        fi
    else
        echo " - tsm is not configured or the configuration is broken"
        echo " - we will not launch the daemon tsm"
        echo " - when tsm will be well configured and the schedule planned, do:"
        echo "   - update-rc.d tsm defaults"
        echo "   - invoke-rc.d tsm start"
        invoke-rc.d tsm stop > /dev/null
        update-rc.d -f tsm remove >/dev/null
    fi
fi
EOF
    #
    chmod a+x ${DEB_BUILD}/DEBIAN/postinst
    #
    #
    # DEBIAN postrm
    cat > ${DEB_BUILD}/DEBIAN/postrm << EOF
#!/bin/sh
set -e

if [ "$1" = "remove" ]; then
	ldconfig
    invoke-rc.d tsm stop > /dev/null
	update-rc.d tsm remove >/dev/null
fi

EOF
    #
    chmod a+x ${DEB_BUILD}/DEBIAN/postrm
    #
    #
    # DESKTOP dsmj & dsmc
    unzip -p cpio_${drpm[${OBJ}]%.rpm}/opt/tivoli/tsm/client/ba/bin/dsm.jar \
             COM/ibm/storage/adsm/cadmin/clientgui/images/dsmwin32.gif \
         | convert - ${DEB_BUILD}/usr/share/pixmaps/dsmwin32.png
    cat > ${DEB_BUILD}/usr/share/applications/dsmj.desktop  << EOF
[Desktop Entry]
Name=dsmj
Comment=This is a backup solution @ UniGE
Exec=tsm
Icon=dsmwin32.png
Terminal=false
Type=Application
Categories=System;
EOF
    cat > ${DEB_BUILD}/usr/share/applications/dsmc.desktop  << EOF
[Desktop Entry]
Name=dsmc
Comment=This is a backup solution @ UniGE
Exec=dsmc
Icon=dsmwin32.png
Terminal=true
Type=Application
Categories=System;
EOF
    #
    #
    # construct package
    fakeroot dpkg -b ${DEB_BUILD}
}



###########################################################
# INTEGRATION
wrap_integration()
{
    OBJ=integration

    # constructed variable
    define_variable
    DEB_VER=${ddeb_ver[${OBJ}]}
    DEBNAME=${SHORT_ORG,,}-${TSM_NAME,,}-${OBJ}
    DEB_BUILD=${TSM_ROOT}/${DEBNAME}_${TSM_VER}-${DEB_VER}


    cd ${TSM_ROOT}

    [ -d ${DEB_BUILD} ] && rm -fr ${DEB_BUILD}
    mkdir -p ${DEB_BUILD}/{etc/tsm,usr/share/pixmaps,usr/share/applications}
    mkdir -p ${DEB_BUILD}/{usr/bin,DEBIAN,${OPT_PATH}/bin}

    #
    #
    # GUI NOTIFICATION start
    cat > ${DEB_BUILD}/${OPT_PATH}/bin/notify-send-tsm.start  << EOF
#!/bin/bash
# 60000 ms= 1min
notify-send -i /usr/share/pixmaps/ubuntu-at-unige.png --expire-time=60000 "Sauvegarde Start" \\
  "Lancement de la sauvegarde de votre machine par TSM sur les serveurs de l'UniGE."
EOF
    #
    chmod a+x ${DEB_BUILD}/${OPT_PATH}/bin/notify-send-tsm.start
    #
    #
    # GUI NOTIFICATION stop
    cat > ${DEB_BUILD}/${OPT_PATH}/bin/notify-send-tsm.stop  << EOF
#!/bin/bash
# 1800000 ms= 30min
notify-send -i /usr/share/pixmaps/ubuntu-at-unige.png  --expire-time=1800000 "Sauvegarde Stop" \\
  "La sauvegarde de votre machines par TSM sur les seveurs de l'UniGE a abouti."
EOF
    #
    chmod a+x ${DEB_BUILD}/${OPT_PATH}/bin/notify-send-tsm.stop
    #
    #
    # TSM CONFIGURE TOOL WRITTEN BY J.-M. NAEF
    cat > ${DEB_BUILD}/usr/bin/tsm-configure << EOF
#!/bin/bash
exec javaws "http://sos.unige.ch/eztsm/apps/servlet/jws?ezubuntu"
EOF
    #
    chmod a+x ${DEB_BUILD}/usr/bin/tsm-configure
    #
    #
    # FIRST SHOOT TSM LAUNCH
    cat > ${DEB_BUILD}/usr/bin/tsm << 'EOF'
#!/bin/bash
#
#
[ -f /etc/tsm/dsm.sys -a -f /etc/tsm/dsm.opt ] && exec dsmj
#
#
echo $LANG | grep -q fr
if [ $? -eq 0 ]
then
    title="Configurer TSM ?"
    text="TSM n'est pas configurer. Nous vous suggérons de lancer \"TSM configure\".\
\n\t- Clic \"Oui\" pour configurer TSM (recommandé).\
\n\t- Clic \"Non\" pour lancer l'application TSM."
else
    title="Configure TSM ?"
    text="TSM is not yet configured. We suggest you to configure it with the \"TSM configuration\".\
\n\t- Clic \"Yes\" to configure it (recommended).\
\n\t- Clic \"No\" to launch the TSM application."
fi
zenity --title="$title" --question --text="$text"
#
#
if [ $? -eq 0 ]
then
   exec tsm-configure
else
   exec dsmj
fi
EOF
    #
    chmod a+x  ${DEB_BUILD}/usr/bin/tsm
    #
    #
    # DESKTOP tsm-configure
    wget -q -O ${DEB_BUILD}/usr/share/pixmaps/tsm-configure.png http://ubuntu.unige.ch/img/icon/tsm-configure.png
    cat > ${DEB_BUILD}/usr/share/applications/tsm-configure.desktop << EOF
[Desktop Entry]
Name=tsm-configure
Comment=Configure TSM the UniGE way
Comment[fr]=Configurer TSM à la sauce UniGE
Exec=tsm-configure
Icon=tsm-configure.png
Terminal=false
Type=Application
Categories=System;ubuntu-at-unige;
EOF
    #
    #
    # DESKTOP tsm
    wget -q -O ${DEB_BUILD}/usr/share/pixmaps/tsm.png http://ubuntu.unige.ch/img/icon/tsm.png
    cat > ${DEB_BUILD}/usr/share/applications/tsm.desktop  << EOF
[Desktop Entry]
Name=tsm
Comment=This is a backup solution @ ${SHORT_ORG}
Exec=tsm
Icon=tsm.png
Terminal=false
Type=Application
Categories=System;ubuntu-at-unige;
EOF
    #
    #
    # DSM.SYS
    cat  > ${DEB_BUILD}/etc/tsm/dsm.sys.example << EOF
SErvername sos5
 COMMMethod         TCPip
 TCPPort           1505
 TCPServeraddress  sos5.unige.ch
 NODENAME          cb10-briner
 PASSWORDACCESS    generate
 SCHEDLOGRetention 7 D
 PRENSChedulecmd     /${OPT_PATH}/bin/notify-send-tsm.start
 POSTNSChedulecmd    /${OPT_PATH}/bin/notify-send-tsm.stop
EOF
    #
    #
    # DSM.OPT
    cat  > ${DEB_BUILD}/etc/tsm/dsm.opt.example << EOF
SErvername sos5
DOMAIN     ALL-LOCAL
EOF
    #
    #
    # DEBIAN control
    cat > ${DEB_BUILD}/DEBIAN/control << EOF
Package: ${DEBNAME}
Version: ${TSM_VER}-${DEB_VER}
Architecture: amd64
Depends: libnotify-bin, ubuntu-at-unige, zenity, ${SHORT_ORG,,}-${TSM_NAME,,}-ba
Maintainer: ${EMAIL_MAINTAINER}
Section: main
Priority: extra
Description: integration for TSM @ ${SHORT_ORG}
 Integration for TSM
 TSM stands for Tivoli Storage Manager and it is a solution for backuping is
 machine at ${SHORT_ORG}.
EOF
    #
    #
    # construct the package
    fakeroot dpkg -b ${DEB_BUILD}
}



###########################################################
# main
#

define_variable

echo "extract RPMs 2 directory with cpio"
echo "=================================="
cd ${TSM_ROOT}
rpm2dir

echo -e "\nlet's rewrap them all"
echo "======================="

echo -e "\nwrap_ssl"
echo "--------"
wrap_ssl

echo -e "\nwrap_crypt"
echo "---------"
wrap_crypt

echo -e "\nwrap_api"
echo "--------"
wrap_api

echo -e "\nwrap_ba"
echo "-------"
wrap_ba

if [[ "$1" == "unige" ]] ; then
    # you can comment this without worry, since it is only related for
    # the University of Geneva. See the doc on github for more info
    echo -e "\nwrap_integration"
    echo "----------------"
    wrap_integration
fi


echo -e "\ncheck the new package created"
echo      "============================="
echo "install packages with: sudo dpkg -i *deb"

